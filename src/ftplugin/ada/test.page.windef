



    --    -------------"_--------------- 
    --   "`w^"                           



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

`"WRAPPED_TEXT
WRAPPED_TEXT_line2"^

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    --    -------------'_--------------- 
    --   '`w^'                           



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

`'WRAPPED_TEXT
WRAPPED_TEXT_line2'^

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    --    -------------(_--------------- 
    --   (`w^)                           



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

`(WRAPPED_TEXT
WRAPPED_TEXT_line2)^

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    --    -------------<_--------------- 
    --   <`w^>                           



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2> b

`<WRAPPED_TEXT
WRAPPED_TEXT_line2>^

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    --    -------------[_--------------- 
    --   [`w^]                           



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

`[WRAPPED_TEXT
WRAPPED_TEXT_line2]^

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    --    -------------`_--------------- 
    --   \``w^\`                         



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

``WRAPPED_TEXT
WRAPPED_TEXT_line2`^

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    --    -------------acc--------------- 
    --   access                           



access 

access  b

`access ^

a access 


    --    -------------ali--------------- 
    --   aliased                          



aliased 

aliased  b

`aliased ^

a aliased 


    --    -------------Author--------------- 
    --   `$author^                           



drdr.xp

drdr.xp b

`drdr.xp^

a drdr.xp


    --    -------------beg--------------- 
    --   begin                            
    --                   `cursor^         
    --   end;                             



begin
		
end;

begin
		
end; b

`begin
		
end;^

a begin
		
end;


    --    -------------case--------------- 
    --   case `1^ is                       
    --                   `cursor^          
    --   end case;                         



case 1 is
		
end case;

case 1_TYPED is
		
end case; b

`case 1 is
		
end case;^

a case 1 is
		
end case;


    --    -------------eli--------------- 
    --   elsif `1^ then                   
    --                   `cursor^         



elsif 1 then
		

	elsif 1_TYPED then
			 b

			 `elsif 1 then
					 ^

					 a elsif 1 then
							 


    --    -------------Email--------------- 
    --   `$email^                           



					 drdr.xp@gmail.com

					 drdr.xp@gmail.com b

					 `drdr.xp@gmail.com^

					 a drdr.xp@gmail.com


    --    -------------File--------------- 
    --   `file()^                          



					 test.page.windef

					 test.page.windef b

					 `test.page.windef^

					 a test.page.windef


    --    -------------for--------------- 
    --   for `1^ in `2^ loop              
    --                   `cursor^         
    --   end loop;                        



					 for 1 in 2 loop
							 
					 end loop;

					 for 1_TYPED in 2_TYPED loop
							 
					 end loop; b

					 `for 1 in 2 loop
							 
					 end loop;^

					 a for 1 in 2 loop
							 
					 end loop;


    --    -------------fun--------------- 
    --   function `1^name^ return `2^ is  
    --                   `3^              
    --   begin -- `1^                     
    --                   `cursor^         
    --   end `1^;                         



					 function name return 2 is
							 3
					 begin -- name
							 
					 end name;

					 function 1_TYPED return 2_TYPED is
							 3_TYPED
					 begin -- 1_TYPED
							 
					 end 1_TYPED; b

					 `function name return 2 is
							 3
					 begin -- name
							 
					 end name;^

					 a function name return 2 is
							 3
					 begin -- name
							 
					 end name;


    --    -------------if--------------- 
    --   if `1^ then                     
    --                   `cursor^        
    --   end if;                         



					 if 1 then
							 
					 end if;

					 if 1_TYPED then
							 
					 end if; b

					 `if 1 then
							 
					 end if;^

					 a if 1 then
							 
					 end if;


    --    -------------loop--------------- 
    --   loop                              
    --                   `cursor^          
    --   end loop;                         



					 loop
							 
					 end loop;

					 loop
							 
					 end loop; b

					 `loop
							 
					 end loop;^

					 a loop
							 
					 end loop;


    --    -------------pac--------------- 
    --   package `1^name^ is              
    --                   `cursor^         
    --   end `1^;                         



					 package name is
							 
					 end name;

					 package 1_TYPED is
							 
					 end 1_TYPED; b

					 `package name is
							 
					 end name;^

					 a package name is
							 
					 end name;


    --    -------------pbo--------------- 
    --   package body `1^name^ is         
    --                   `cursor^         
    --   end `1^;                         



					 package body name is
							 
					 end name;

					 package body 1_TYPED is
							 
					 end 1_TYPED; b

					 `package body name is
							 
					 end name;^

					 a package body name is
							 
					 end name;


    --    -------------pne--------------- 
    --   package `1^ is `cursor^          



					 package 1 is 

						 package 1_TYPED is  b

							 `package 1 is ^

							 a package 1 is 


    --    -------------pro---------------                    
    --   procedure `1^Procedure^ is                          
    --                   `2^                                 
    --   begin -- `mark^S(R('1'),'([a-zA-Z0-9_]*).*$','\1')^ 
    --                   `cursor^                            
    --   end `mark^;                                         



							 procedure Procedure is
									 2
							 begin -- Procedure
									 
							 end Procedure;

							 procedure 1_TYPED is
									 2_TYPED
							 begin -- mark_TYPED
									 
							 end mark_TYPED; b

							 `procedure Procedure is
									 2
							 begin -- Procedure
									 
							 end Procedure;^

							 a procedure Procedure is
									 2
							 begin -- Procedure
									 
							 end Procedure;


    --    -------------rec--------------- 
    --   record                           
    --                   `cursor^         
    --   end record;                      



							 record
									 
							 end record;

								 record
										 
								 end record; b

									 `record
											 
									 end record;^

										 a record
												 
										 end record;


    --    -------------ret--------------- 
    --   return `1^;                      



											 return 1;

										 return 1_TYPED; b

										 `return 1;^

										 a return 1;


    --    -------------ty--------------- 
    --   type `1^ is `cursor^            



									 type 1 is 

										 type 1_TYPED is  b

											 `type 1 is ^

											 a type 1 is 


    --    -------------u--------------- 
    --   use `1^;                       



											 use 1;

											 use 1_TYPED; b

											 `use 1;^

											 a use 1;


    --    -------------w--------------- 
    --   with `1^;                      



											 with 1;

											 with 1_TYPED; b

											 `with 1;^

											 a with 1;


    --    -------------when--------------- 
    --   when `1^ =>                       
    --                   `cursor^          



	when 1 =>
			

		when 1_TYPED =>
				 b

				 `when 1 =>
						 ^

						 a when 1 =>
								 


    --    -------------whi--------------- 
    --   while `1^ loop                   
    --                   `cursor^         
    --   end loop;                        



						 while 1 loop
								 
						 end loop;

						 while 1_TYPED loop
								 
						 end loop; b

						 `while 1 loop
								 
						 end loop;^

						 a while 1 loop
								 
						 end loop;


    --    -------------wu--------------- 
    --   with `what^; use `1^;           
    --   `cursor^                        



						 with what; use 1;
						 

						 with what_TYPED; use 1_TYPED;
						  b

						  `with what; use 1;
						  ^

						  a with what; use 1;
						  


    --    -------------{_--------------- 
    --   {`w^}                           



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2} b

`{WRAPPED_TEXT
WRAPPED_TEXT_line2}^

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}
