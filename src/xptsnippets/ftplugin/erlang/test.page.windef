



    /*  -------------"_--------------- */
    /* "`w^"                           */



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

`"WRAPPED_TEXT
WRAPPED_TEXT_line2"^

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    /*  -------------'_--------------- */
    /* '`w^'                           */



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

`'WRAPPED_TEXT
WRAPPED_TEXT_line2'^

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    /*  -------------(_--------------- */
    /* (`w^)                           */



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

`(WRAPPED_TEXT
WRAPPED_TEXT_line2)^

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------<_--------------- */
    /* <`w^>                           */



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2> b

`<WRAPPED_TEXT
WRAPPED_TEXT_line2>^

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    /*  -------------[_--------------- */
    /* [`w^]                           */



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

`[WRAPPED_TEXT
WRAPPED_TEXT_line2]^

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    /*  -------------`_--------------- */
    /* \``w^\`                         */



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

``WRAPPED_TEXT
WRAPPED_TEXT_line2`^

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    /*  -------------Author--------------- */
    /* `$author^                           */



    drdr.xp

drdr.xp b

`drdr.xp^

a drdr.xp


    /*  -------------case--------------- */
    /* case `matched^ of                 */
    /*         `pattern^ ->              */
    /*                 `body^`...^;      */
    /*         `patternn^ ->             */
    /*                 `bodyn^`...^      */
    /* end `cursor^                      */



case matched of
	pattern ->
		body;
	patternn ->
		bodyn;
	patternn ->
		bodyn;
	patternn ->
		bodyn
end 

case matched_TYPED of
	pattern_TYPED ->
		body_TYPED_TYPED
end  b

`case matched of
	pattern ->
		body;
	patternn ->
		bodyn;
	patternn ->
		bodyn;
	patternn ->
		bodyn
end ^

a case matched of
	pattern ->
		body;
	patternn ->
		bodyn;
	patternn ->
		bodyn;
	patternn ->
		bodyn
end 


    /*  -------------def--------------- */
    /* -define( `what^, `def^ ).        */



-define( what, def ).

-define( what_TYPED, def_TYPED ). b

`-define( what, def ).^

a -define( what, def ).


    /*  -------------Email--------------- */
    /* `$email^                           */



    drdr.xp@gmail.com

drdr.xp@gmail.com b

`drdr.xp@gmail.com^

a drdr.xp@gmail.com


    /*  -------------File--------------- */
    /* `file()^                          */



    test.page.windef

test.page.windef b

`test.page.windef^

a test.page.windef


    /*  -------------fun---------------  */
    /* fun (`params^) `_^ -> `body^`     */
    /*         `more...{{^;              */
    /*         (`params^) `_^ -> `body^` */
    /*         `...{{^;                  */
    /*         (`params^) `_^ -> `body^` */
    /*         `...^`}}^`}}^             */
    /* end `cursor^                      */



fun (params) _ -> body;
	(params) _ -> body;
	(params) _ -> body;
	(params) _ -> body
end 

fun (params_TYPED) __TYPED -> body_TYPED
	more_TYPED
end  b

`fun (params) _ -> body;
	(params) _ -> body;
	(params) _ -> body;
	(params) _ -> body
end ^

a fun (params) _ -> body;
	(params) _ -> body;
	(params) _ -> body;
	(params) _ -> body
end 


    /*  -------------function---------------  */
    /* `funName^ ( `args0^ ) `_^ ->           */
    /*         `body0^ `...^;                 */
    /* `name^R('funName')^ ( `argsn^ ) `_^ -> */
    /*         `bodyn^`...^                   */
    /* .                                      */



funName ( args0 ) _ ->
	body0 ;
funName ( argsn ) _ ->
	bodyn;
funName ( argsn ) _ ->
	bodyn;
funName ( argsn ) _ ->
	bodyn
.

funName_TYPED ( args0_TYPED ) __TYPED ->
	body0_TYPED _TYPED
. b

`funName ( args0 ) _ ->
	body0 ;
funName ( argsn ) _ ->
	bodyn;
funName ( argsn ) _ ->
	bodyn;
funName ( argsn ) _ ->
	bodyn
.^

a funName ( args0 ) _ ->
	body0 ;
funName ( argsn ) _ ->
	bodyn;
funName ( argsn ) _ ->
	bodyn;
funName ( argsn ) _ ->
	bodyn
.


    /*  -------------if--------------- */
    /* if                              */
    /*         `cond^ ->               */
    /*                 `body^` `...^;  */
    /*         `cond2^ ->              */
    /*                 `bodyn^` `...^  */
    /* end `cursor^                    */



if
	cond ->
		body;
	cond2 ->
		bodyn;
	cond2 ->
		bodyn;
	cond2 ->
		bodyn
end 

if
	cond_TYPED ->
		body_TYPED _TYPED
end  b

`if
	cond ->
		body;
	cond2 ->
		bodyn;
	cond2 ->
		bodyn;
	cond2 ->
		bodyn
end ^

a if
	cond ->
		body;
	cond2 ->
		bodyn;
	cond2 ->
		bodyn;
	cond2 ->
		bodyn
end 


    /*  -------------ifdef--------------- */
    /* -ifdef( `what^ ).                  */
    /*         `thenmacro^                */
    /* ``else...`                         */
    /* {{^-else.                          */
    /*         `cursor^                   */
    /* `}}^-endif().                      */



-ifdef( what ).
	thenmacro
-else.
	
-endif().

-ifdef( what_TYPED ).
	thenmacro_TYPED
	else_TYPED
-endif(). b

`-ifdef( what ).
	thenmacro
-else.
	
-endif().^

a -ifdef( what ).
	thenmacro
-else.
	
-endif().


    /*  -------------ifndef--------------- */
    /* -ifndef( `what^ ).                  */
    /*         `thenmacro^                 */
    /* ``else...`                          */
    /* {{^-else.                           */
    /*         `cursor^                    */
    /* `}}^-endif().                       */



-ifndef( what ).
	thenmacro
-else.
	
-endif().

-ifndef( what_TYPED ).
	thenmacro_TYPED
	else_TYPED
-endif(). b

`-ifndef( what ).
	thenmacro
-else.
	
-endif().^

a -ifndef( what ).
	thenmacro
-else.
	
-endif().


    /*  -------------inc--------------- */
    /* -include( "`cursor^.hrl").       */



-include( ".hrl").

-include( ".hrl"). b

`-include( ".hrl").^

a -include( ".hrl").


    /*  -------------receive--------------- */
    /* receive                              */
    /*         `pattern^ ->                 */
    /*                 `body^` `...^;       */
    /*         `patternn^ ->                */
    /*                 `body^` `...^`       */
    /*    `after...{{^                      */
    /*         after                        */
    /*         `afterBody^`}}^              */
    /* end                                  */



receive
	pattern ->
		body;
	patternn ->
		body;
	patternn ->
		body;
	patternn ->
		body
	after
	afterBody
end

receive
	pattern_TYPED ->
		body_TYPED _TYPED
after_TYPED
end b

`receive
	pattern ->
		body;
	patternn ->
		body;
	patternn ->
		body;
	patternn ->
		body
	after
	afterBody
end^

a receive
	pattern ->
		body;
	patternn ->
		body;
	patternn ->
		body;
	patternn ->
		body
	after
	afterBody
end


    /*  -------------record--------------- */
    /* -record( `recordName^               */
    /*                 ,{ `field1^`...^    */
    /*                 ,  `fieldn^`...^    */
    /*                 }).                 */



-record( recordName
		,{ field1
		,  fieldn
		,  fieldn
		,  fieldn
		}).

-record( recordName_TYPED
		,{ field1_TYPED_TYPED
		}). b

`-record( recordName
		,{ field1
		,  fieldn
		,  fieldn
		,  fieldn
		}).^

a -record( recordName
		,{ field1
		,  fieldn
		,  fieldn
		,  fieldn
		}).


    /*  -------------try--------------- */
    /* try `what^                       */
    /* catch                            */
    /*         `except^ -> `toRet^`     */
    /*         `...^;                   */
    /*         `except^ -> `toRet^`     */
    /*         `...^`                   */
    /* `after...{{^                     */
    /* after                            */
    /*         `afterBody^`}}^          */
    /* end `cursor^                     */



try WRAPPED_TEXT
WRAPPED_TEXT_line2
catch
	except -> toRet;
	except -> toRet;
	except -> toRet;
	except -> toRet
after
	afterBody
end 

try WRAPPED_TEXT
WRAPPED_TEXT_line2
catch
	except_TYPED -> toRet_TYPED
	_TYPED
after_TYPED
end  b

`try WRAPPED_TEXT
WRAPPED_TEXT_line2
catch
	except -> toRet;
	except -> toRet;
	except -> toRet;
	except -> toRet
after
	afterBody
end ^

a try WRAPPED_TEXT
WRAPPED_TEXT_line2
catch
	except -> toRet;
	except -> toRet;
	except -> toRet;
	except -> toRet
after
	afterBody
end 


    /*  -------------tryof---------------  */
    /* try `what^ of                       */
    /*         `pattern^ ->                */
    /*                 `body^` `more...^;  */
    /*         `patternn^ ->               */
    /*                 `body^` `more...^   */
    /* catch                               */
    /*         `excep^ -> `toRet^` `...^;  */
    /*         `except^ -> `toRet^` `...^` */
    /* `after...{{^                        */
    /* after                               */
    /*         `afterBody^`}}^             */
    /* end `cursor^                        */



try what of
	pattern ->
		body;
	patternn ->
		body;
	patternn ->
		body;
	patternn ->
		body
catch
	excep -> toRet;
	except -> toRet;
	except -> toRet
after
	afterBody
end 

try what_TYPED of
	pattern_TYPED ->
		body_TYPED more_TYPED
catch
	excep_TYPED -> toRet_TYPED _TYPED
after_TYPED
end  b

`try what of
	pattern ->
		body;
	patternn ->
		body;
	patternn ->
		body;
	patternn ->
		body
catch
	excep -> toRet;
	except -> toRet;
	except -> toRet
after
	afterBody
end ^

a try what of
	pattern ->
		body;
	patternn ->
		body;
	patternn ->
		body;
	patternn ->
		body
catch
	excep -> toRet;
	except -> toRet;
	except -> toRet
after
	afterBody
end 


    /*  -------------{_--------------- */
    /* {`w^}                           */



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2} b

`{WRAPPED_TEXT
WRAPPED_TEXT_line2}^

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}
