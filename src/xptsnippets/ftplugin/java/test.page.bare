


    //  -------------"_--------------- 
    // "`w^"                           



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

`"WRAPPED_TEXT
WRAPPED_TEXT_line2"^

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    //  -------------'_--------------- 
    // '`w^'                           



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

`'WRAPPED_TEXT
WRAPPED_TEXT_line2'^

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    //  -------------(_--------------- 
    // (`w^)                           



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

`(WRAPPED_TEXT
WRAPPED_TEXT_line2)^

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    //  -------------<_--------------- 
    // <`w^>                           



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2> b

`<WRAPPED_TEXT
WRAPPED_TEXT_line2>^

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    //  -------------[_--------------- 
    // [`w^]                           



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

`[WRAPPED_TEXT
WRAPPED_TEXT_line2]^

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    //  -------------`_--------------- 
    // \``w^\`                         



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

``WRAPPED_TEXT
WRAPPED_TEXT_line2`^

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    //  -------------Author--------------- 
    // `$author^                           



drdr.xp

drdr.xp b

`drdr.xp^

a drdr.xp


    //  -------------case--------------- 
    // case `constant^`$SPcmd^:          
    //         `cursor^                  
    //         break;                    



case constant :
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
	break;

	case constant_TYPED :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break; b

		`case constant :
			WRAPPED_TEXT
			WRAPPED_TEXT_line2
			break;^

			a case constant :
				WRAPPED_TEXT
				WRAPPED_TEXT_line2
				break;


    //  -------------class---------------                   
    // public class `className^ {                           
    //         public `className^(` `ctorParam` ^)`$BRfun^{ 
    //                 `cursor^                             
    //         }                                            
    // }                                                    



				public class className {
					public className( ctorParam ) {
						
					}
				}

public class className_TYPED {
	public className_TYPED( ctorParam_TYPED ) {
		
	}
} b

`public class className {
	public className( ctorParam ) {
		
	}
}^

a public class className {
	public className( ctorParam ) {
		
	}
}


    //  -------------comment--------------- 
    // `$CL^ `what^^ `$CR^`^                



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */ b

`/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */^

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    //  -------------commentBlock--------------- 
    // `$_xCommentLeftWithoutMid^`$CM `cursor^   
    // `$_xCommentMidIndent$CR^                  



/* WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */

/* WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */ b

`/* WRAPPED_TEXT
  * WRAPPED_TEXT_line2
 */^

a /* WRAPPED_TEXT
   * WRAPPED_TEXT_line2
 */


    //  -------------commentDoc--------------- 
    // `$CL^`$CM^                              
    // `$_xCommentMidIndent$CM `cursor^        
    // `$_xCommentMidIndent$CR^                



/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */

/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */ b

`/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */^

a /**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */


    //  -------------commentLine--------------- 
    // `$CL `what` $CR^`^                       



/* WRAPPED_TEXT */
/* WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT */
/* WRAPPED_TEXT_line2 */ b

`/* WRAPPED_TEXT */
 /* WRAPPED_TEXT_line2 */^

 a /* WRAPPED_TEXT */
   /* WRAPPED_TEXT_line2 */


    //  -------------default--------------- 
    // default:                             
    //         `cursor^                     



 default:
	 

 default:
	  b

	  `default:
		  ^

		  a default:
			  


    //  -------------do---------------                       
    // do`$BRloop^{                                          
    //         `cursor^                                      
    // }`$BRloop^while`$SPcmd^(`$SParg^`condition^`$SParg^); 



do {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} while ( condition );

do {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} while ( condition_TYPED ); b

`do {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} while ( condition );^

a do {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} while ( condition );


    //  -------------elif--------------- 
    // else `Include:_if^                



else if ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

else if ( condition_TYPED ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`else if ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a else if ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------else--------------- 
    // else`$BRif^{                      
    //         `cursor^                  
    // }                                 



else {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

else {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`else {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a else {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------Email--------------- 
    // `$email^                           



drdr.xp@gmail.com

drdr.xp@gmail.com b

`drdr.xp@gmail.com^

a drdr.xp@gmail.com


    //  -------------enum--------------- 
    // `public^ enum `enumName^          
    // {                                 
    //         `elem^` `...^,            
    //         `subElem^` `...^          
    // };                                
    // `cursor^                          



public enum enumName
{
	elem,
	subElem,
	subElem,
	subElem
};


public_TYPED enum enumName_TYPED
{
	elem_TYPED _TYPED
};
 b

 `public enum enumName
 {
	 elem,
	 subElem,
	 subElem,
	 subElem
 };
 ^

 a public enum enumName
 {
	 elem,
	 subElem,
	 subElem,
	 subElem
 };
 


    //  -------------File--------------- 
    // `file()^                          



test.page.bare

test.page.bare b

`test.page.bare^

a test.page.bare


    //  -------------for---------------                   
    // for (`int^ `i^ = `0^; `i^ < `len^; ++`i^) `$BRif^{ 
    //         `cursor^                                   
    // }                                                  



for (int i = 0; i < len; ++i)  {
	
}

for (int_TYPED i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED)  {
	
} b

`for (int i = 0; i < len; ++i)  {
	
}^

a for (int i = 0; i < len; ++i)  {
	
}


    //  -------------foreach---------------      
    // for ( `type^ `var^ : `inWhat^ )`$BRloop^{ 
    //         `cursor^                          
    // }                                         



for ( type var : inWhat ) {
	
}

for ( type_TYPED var_TYPED : inWhat_TYPED ) {
	
} b

`for ( type var : inWhat ) {
	
}^

a for ( type var : inWhat ) {
	
}


    //  -------------forr---------------                     
    // for (`int^ `i^ = `n^; `i^ >`=^ `end^; --`i^) `$BRif^{ 
    //         `cursor^                                      
    // }                                                     



for (int i = n; i >= end; --i)  {
	
}

for (int_TYPED i_TYPED = n_TYPED; i_TYPED >_TYPED end_TYPED; --i_TYPED)  {
	
} b

`for (int i = n; i >= end; --i)  {
	
}^

a for (int i = n; i >= end; --i)  {
	
}


    //  -------------if--------------- 
    // `Include:_if^                   



if ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( condition_TYPED ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------if0--------------- 
    // `Include:_if^                    



if ( 0 == var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( 0 == var_TYPED ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( 0 == var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( 0 == var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------ifee---------------                              
    // `:_if:^` `else_if...{{^`$BRel^`Include:elif^` `else_if...^`}}^ 



if ( condition ) {
	
}
else if ( condition ) {
	/* cursor */
}
else if ( condition ) {
	/* cursor */
}
else if ( condition ) {
	/* cursor */
}

if ( condition_TYPED ) {
	_TYPED
} else_if_TYPED b

`if ( condition ) {
	
}
else if ( condition ) {
	/* cursor */
}
else if ( condition ) {
	/* cursor */
}
else if ( condition ) {
	/* cursor */
}^

a if ( condition ) {
	
}
else if ( condition ) {
	/* cursor */
}
else if ( condition ) {
	/* cursor */
}
else if ( condition ) {
	/* cursor */
}


    //  -------------ifn--------------- 
    // `Include:_if^                    



if ( null == var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( null == var_TYPED ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( null == var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( null == var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------ifn0--------------- 
    // `Include:_if^                     



if ( 0 != var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( 0 != var_TYPED ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( 0 != var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( 0 != var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------ifnn--------------- 
    // `Include:_if^                     



if ( null != var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( null != var_TYPED ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( null != var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( null != var ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------main---------------                 
    // public static void main( String[] args )`$BRfun^{ 
    //         `cursor^                                  
    // }                                                 



public static void main( String[] args ) {
	
}

public static void main( String[] args ) {
	
} b

`public static void main( String[] args ) {
	
}^

a public static void main( String[] args ) {
	
}


    //  -------------private--------------- 
    // private `type^ `varName^;            



private type varName;

private type_TYPED varName_TYPED; b

`private type varName;^

a private type varName;


    //  -------------prop--------------- 
    // `type^ `varName^;                 
    //                                   
    // `get...^                          
    // `set...^                          



type varName;

public type getVarName()
	{ return varName; }

public type setVarName( type val )
	{ varName = val; return varName; }


	type_TYPED varName_TYPED;
	
	get_TYPED
	set_TYPED b

	`type varName;
	
	public type getVarName()
		{ return varName; }
	
	public type setVarName( type val )
		{ varName = val; return varName; }
	^

	a type varName;
	
	public type getVarName()
		{ return varName; }
	
	public type setVarName( type val )
		{ varName = val; return varName; }
	


    //  -------------protected--------------- 
    // protected `type^ `varName^;            



		protected type varName;

		protected type_TYPED varName_TYPED; b

		`protected type varName;^

		a protected type varName;


    //  -------------public--------------- 
    // public `type^ `varName^;            



		public type varName;

		public type_TYPED varName_TYPED; b

		`public type varName;^

		a public type varName;


    //  -------------switch---------------    
    // switch (`$SParg^`var^`$SParg^)`$BRif^{ 
    //         `Include:case^                 
    // }                                      



switch ( var ) {
	case constant :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break;
}

switch ( var_TYPED ) {
	case constant_TYPED :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break;
} b

`switch ( var ) {
	case constant :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break;
}^

a switch ( var ) {
	case constant :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break;
}


    //  -------------try--------------- 
    // try                              
    // {                                
    //         `what^                   
    // }` `catch...^                    
    // `finally...{{^finally            
    // {                                
    //         `cursor^                 
    // }`}}^                            



try
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
catch (Exception e)
{
	/* handling */
}
catch (Exception e)
{
	/* handling */
}
catch (Exception e)
{
	/* handling */
}
finally
{
	
}

try
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} catch_TYPED
finally_TYPED b

`try
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
catch (Exception e)
{
	/* handling */
}
catch (Exception e)
{
	/* handling */
}
catch (Exception e)
{
	/* handling */
}
finally
{
	
}^

a try
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
catch (Exception e)
{
	/* handling */
}
catch (Exception e)
{
	/* handling */
}
catch (Exception e)
{
	/* handling */
}
finally
{
	
}


    //  -------------while---------------                   
    // while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ 
    //         `cursor^                                     
    // }                                                    



while ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

while ( condition_TYPED ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`while ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a while ( condition ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------while0---------------                   
    // do`$BRloop^{                                          
    //         `cursor^                                      
    // }`$BRloop^while`$SPcmd^(`$SParg^`condition^`$SParg^); 



do {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} while ( false );

do {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} while ( false ); b

`do {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} while ( false );^

a do {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} while ( false );


    //  -------------while1---------------                  
    // while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ 
    //         `cursor^                                     
    // }                                                    



while ( true ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

while ( true ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`while ( true ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a while ( true ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------whilenn---------------                 
    // while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ 
    //         `cursor^                                     
    // }                                                    



while ( null != x ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

while ( null != x_TYPED ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`while ( null != x ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a while ( null != x ) {
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    //  -------------{_--------------- 
    // {`w^}                           



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2} b

`{WRAPPED_TEXT
WRAPPED_TEXT_line2}^

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}
