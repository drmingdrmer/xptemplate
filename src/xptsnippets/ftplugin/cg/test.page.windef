



    /*  -------------"_--------------- */
    /* "`w^"                           */



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

`"WRAPPED_TEXT
WRAPPED_TEXT_line2"^

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    /*  -------------#if--------------- */
    /* #if `0^                          */
    /* `cursor^                         */
    /* #endif                           */



#if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif

#if 0_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif b

`#if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif^

a #if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif


    /*  -------------#ifdef--------------- */
    /* #ifdef `symbol^                     */
    /* `cursor^                            */
    /* #endif `$CL^ `symbol^ `$CR^         */



#ifdef SYMBOL
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL */

#ifdef SYMBOL_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL_TYPED */ b

`#ifdef SYMBOL
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL */^

a #ifdef SYMBOL
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL */


    /*  -------------#ifndef--------------- */
    /* #ifndef `symbol^                     */
    /* `cursor^                             */
    /* #endif `$CL^ `symbol^ `$CR^          */



#ifndef SYMBOL
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL */

#ifndef SYMBOL_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL_TYPED */ b

`#ifndef SYMBOL
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL */^

a #ifndef SYMBOL
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL */


    /*  -------------#inc--------------- */
    /* #include <`^.h>                   */



#include <.h>

#include <_TYPED.h> b

`#include <.h>^

a #include <.h>


    /*  -------------#include_user--------------- */
    /* #include "`me^.h"                          */



#include "test.page.h"

#include "me_TYPED.h" b

`#include "test.page.h"^

a #include "test.page.h"


    /*  -------------#ind--------------- */
    /* #include "`me^.h"                 */



#include "test.page.h"

#include "me_TYPED.h" b

`#include "test.page.h"^

a #include "test.page.h"


    /*  -------------'_--------------- */
    /* '`w^'                           */



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

`'WRAPPED_TEXT
WRAPPED_TEXT_line2'^

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    /*  -------------(_--------------- */
    /* (`w^)                           */



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

`(WRAPPED_TEXT
WRAPPED_TEXT_line2)^

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------<_--------------- */
    /* <`w^>                           */



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2> b

`<WRAPPED_TEXT
WRAPPED_TEXT_line2>^

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    /*  -------------[_--------------- */
    /* [`w^]                           */



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

`[WRAPPED_TEXT
WRAPPED_TEXT_line2]^

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    /*  -------------`_--------------- */
    /* \``w^\`                         */



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

``WRAPPED_TEXT
WRAPPED_TEXT_line2`^

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    /*  -------------Author--------------- */
    /* `$author^                           */



drdr.xp

drdr.xp b

`drdr.xp^

a drdr.xp


    /*  -------------case--------------- */
    /* case `constant^`$SPcmd^:          */
    /*         `cursor^                  */
    /*         break;                    */



case constant :
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
	break;

case constant_TYPED :
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
	break; b

`case constant :
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
	break;^

a case constant :
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
	break;


    /*  -------------default--------------- */
    /* default:                             */
    /*         `cursor^                     */



default:
	

default:
	 b

`default:
	^

a default:
	


    /*  -------------do---------------                       */
    /* do`$BRloop^{                                          */
    /*         `cursor^                                      */
    /* }`$BRloop^while`$SPcmd^(`$SParg^`condition^`$SParg^); */



do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( condition );

do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( condition_TYPED ); b

`do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( condition );^

a do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( condition );


    /*  -------------elif--------------- */
    /* else `Include:_if^                */



else if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

else if ( condition_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`else if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a else if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------else--------------- */
    /* else`$BRif^{                      */
    /*         `cursor^                  */
    /* }                                 */



else
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

else
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`else
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a else
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------Email--------------- */
    /* `$email^                           */



drdr.xp@gmail.com

drdr.xp@gmail.com b

`drdr.xp@gmail.com^

a drdr.xp@gmail.com


    /*  -------------File--------------- */
    /* `file()^                          */



test.page.windef

test.page.windef b

`test.page.windef^

a test.page.windef


    /*  -------------for---------------                                                             */
    /* for`$SPcmd^(`$SParg^`i^`$SPop^=`$SPop^`0^; `i^`$SPop^<`$SPop^`len^; `i^++`$SParg^)`$BRloop^{ */
    /*         `cursor^                                                                             */
    /* }                                                                                            */



for ( i = 0; i < len; i++ )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

for ( i_TYPED = 0_TYPED; i_TYPED < len_TYPED; i_TYPED++ )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`for ( i = 0; i < len; i++ )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a for ( i = 0; i < len; i++ )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------forever--------------- */
    /* for`$SPcmd^(;;) `cursor^             */



for (;;) 

for (;;)  b

`for (;;) ^

a for (;;) 


    /*  -------------forr---------------                                                          */
    /* for`$SPcmd^(`$SParg^`i^`$SPop^=`$SPop^`n^; `i^`$SPop^>`=$SPop`0^; `i^--`$SParg^)`$BRloop^{ */
    /*         `cursor^                                                                           */
    /* }                                                                                          */



for ( i = n; i >= 0; i-- )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

for ( i_TYPED = n_TYPED; i_TYPED >= 0_TYPED; i_TYPED-- )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`for ( i = n; i >= 0; i-- )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a for ( i = n; i >= 0; i-- )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------fragProg---------------                          */
    /* void main( `inputs...^ float`n^ `name^ : `vin^,                */
    /*                 `inputs...^float4 `color^ : COLOR`depth...{{^, */
    /*                 out float4 `name^ : DEPTH`}}^ )                */
    /* {                                                              */
    /*         `cursor^                                               */
    /* }                                                              */



void main(  floatn name : COLOR0,
		 floatn name : COLOR0,
				 floatn name : COLOR0,
						float4 color : COLOR,
						out float4 name : DEPTH )
{
	
}

void main( inputs_TYPEDfloat4 color_TYPED : COLORdepth_TYPED )
{
	
} b

`void main(  floatn name : COLOR0,
		 floatn name : COLOR0,
				 floatn name : COLOR0,
						float4 color : COLOR,
						out float4 name : DEPTH )
{
	
}^

a void main(  floatn name : COLOR0,
		 floatn name : COLOR0,
				 floatn name : COLOR0,
						float4 color : COLOR,
						out float4 name : DEPTH )
{
	
}


    /*  -------------fun--------------- */
    /* `type^ `name^(                   */
    /*                          )       */
    /* {                                */
    /*         `cursor^                 */
    /* }                                */



type name(
			 )
{
	
}

type_TYPED name_TYPED(
			 )
{
	
} b

`type name(
			 )
{
	
}^

a type name(
			 )
{
	
}


    /*  -------------if--------------- */
    /* `Include:_if^                   */



if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( condition_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------if0--------------- */
    /* `Include:_if^                    */



if ( 0 == var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( 0 == var_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( 0 == var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( 0 == var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------ifee---------------                              */
    /* `:_if:^` `else_if...{{^`$BRel^`Include:elif^` `else_if...^`}}^ */



if ( condition )
{
	
}
else if ( condition )
{
	/* cursor */
}
else if ( condition )
{
	/* cursor */
}
else if ( condition )
{
	/* cursor */
}

if ( condition_TYPED )
{
	_TYPED
} else_if_TYPED b

`if ( condition )
{
	
}
else if ( condition )
{
	/* cursor */
}
else if ( condition )
{
	/* cursor */
}
else if ( condition )
{
	/* cursor */
}^

a if ( condition )
{
	
}
else if ( condition )
{
	/* cursor */
}
else if ( condition )
{
	/* cursor */
}
else if ( condition )
{
	/* cursor */
}


    /*  -------------ifn--------------- */
    /* `Include:_if^                    */



if ( NULL == var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( NULL == var_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( NULL == var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( NULL == var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------ifn0--------------- */
    /* `Include:_if^                     */



if ( 0 != var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( 0 != var_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( 0 != var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( 0 != var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------ifnn--------------- */
    /* `Include:_if^                     */



if ( NULL != var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

if ( NULL != var_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`if ( NULL != var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a if ( NULL != var )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------interface--------------- */
    /* interface `interfaceName^              */
    /* {                                      */
    /*         `cursor^                       */
    /* };                                     */



interface interfaceName
{
	
};

interface interfaceName_TYPED
{
	
}; b

`interface interfaceName
{
	
};^

a interface interfaceName
{
	
};


    /*  -------------once--------------- */
    /* #ifndef `symbol^                  */
    /* #     define `symbol^             */
    /*                                   */
    /* `cursor^                          */
    /* #endif `$CL^ `symbol^ `$CR^       */



#ifndef __TEST_PAGE_WINDEF__
#     define __TEST_PAGE_WINDEF__

WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* __TEST_PAGE_WINDEF__ */

#ifndef SYMBOL_TYPED
#     define SYMBOL_TYPED

WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* SYMBOL_TYPED */ b

`#ifndef __TEST_PAGE_WINDEF__
#     define __TEST_PAGE_WINDEF__

WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* __TEST_PAGE_WINDEF__ */^

a #ifndef __TEST_PAGE_WINDEF__
#     define __TEST_PAGE_WINDEF__

WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* __TEST_PAGE_WINDEF__ */


    /*  -------------pass---------------                                                                 */
    /* pass `passName^ {`common...{{^                                                                    */
    /*         VertexProgram = `compilev...{{^compile `vtarget^ `main^main^`}}^;                         */
    /*         FragmentProgram = `compilef...{{^compile `ftarget^ `main^main^`}}^;`GeometryProgram...{{^ */
    /*         GeometryProgram = `compilef...{{^compile `gtarget^ `main^main^`}}^;`}}^                   */
    /*         `}}^`cursor^                                                                              */
    /* };                                                                                                */



pass passName {
	VertexProgram = compile arbvp1 main;
	FragmentProgram = compile arbfp1 main;
	GeometryProgram = ;
	
};

pass passName_TYPED {common_TYPED
}; b

`pass passName {
	VertexProgram = compile arbvp1 main;
	FragmentProgram = compile arbfp1 main;
	GeometryProgram = ;
	
};^

a pass passName {
	VertexProgram = compile arbvp1 main;
	FragmentProgram = compile arbfp1 main;
	GeometryProgram = ;
	
};


    /*  -------------struct---------------                     */
    /* struct `structName^`inherit...{{^ : `interfaceName^`}}^ */
    /* {                                                       */
    /*         `cursor^                                        */
    /* };                                                      */



struct structName : interfaceName
{
	
};

struct structName_TYPEDinherit_TYPED
{
	
}; b

`struct structName : interfaceName
{
	
};^

a struct structName : interfaceName
{
	
};


    /*  -------------switch---------------    */
    /* switch (`$SParg^`var^`$SParg^)`$BRif^{ */
    /*         `Include:case^                 */
    /* }                                      */



switch ( var )
{
	case constant :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break;
}

switch ( var_TYPED )
{
	case constant_TYPED :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break;
} b

`switch ( var )
{
	case constant :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break;
}^

a switch ( var )
{
	case constant :
		WRAPPED_TEXT
		WRAPPED_TEXT_line2
		break;
}


    /*  -------------tech--------------- */
    /* technique `techName^              */
    /* {                                 */
    /*         `cursor^                  */
    /* };                                */



technique techName
{
	
};

technique techName_TYPED
{
	
}; b

`technique techName
{
	
};^

a technique techName
{
	
};


    /*  -------------vertexProg---------------                              */
    /* void main( `inputs...^ float`n^ `name^ : `vin^,                      */
    /*                 `inputs...^float4 `position^ : POSITION`outputs...^, */
    /*                 out float4 `name^ : `vout^`outputs...^ )             */
    /* {                                                                    */
    /*         `cursor^                                                     */
    /* }                                                                    */



void main(  floatn name : POSITION,
		 floatn name : POSITION,
				 floatn name : POSITION,
						float4 position : POSITION,
						out float4 name : COLOR0,
						out float4 name : COLOR0 )
{
	
}

void main( inputs_TYPEDfloat4 position_TYPED : POSITIONoutputs_TYPED )
{
	
} b

`void main(  floatn name : POSITION,
		 floatn name : POSITION,
				 floatn name : POSITION,
						float4 position : POSITION,
						out float4 name : COLOR0,
						out float4 name : COLOR0 )
{
	
}^

a void main(  floatn name : POSITION,
		 floatn name : POSITION,
				 floatn name : POSITION,
						float4 position : POSITION,
						out float4 name : COLOR0,
						out float4 name : COLOR0 )
{
	
}


    /*  -------------while---------------                   */
    /* while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ */
    /*         `cursor^                                     */
    /* }                                                    */



while ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

while ( condition_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`while ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a while ( condition )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------while0---------------                   */
    /* do`$BRloop^{                                          */
    /*         `cursor^                                      */
    /* }`$BRloop^while`$SPcmd^(`$SParg^`condition^`$SParg^); */



do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( 0 );

do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( 0 ); b

`do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( 0 );^

a do
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}
while ( 0 );


    /*  -------------while1---------------                  */
    /* while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ */
    /*         `cursor^                                     */
    /* }                                                    */



while ( 1 )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

while ( 1 )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`while ( 1 )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a while ( 1 )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------whilenn---------------                 */
    /* while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ */
    /*         `cursor^                                     */
    /* }                                                    */



while ( NULL != x )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}

while ( NULL != x_TYPED )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
} b

`while ( NULL != x )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}^

a while ( NULL != x )
{
	WRAPPED_TEXT
	WRAPPED_TEXT_line2
}


    /*  -------------{_--------------- */
    /* {`w^}                           */



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2} b

`{WRAPPED_TEXT
WRAPPED_TEXT_line2}^

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}
