



    /*  -------------"_--------------- */
    /* "`w^"                           */



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

`"WRAPPED_TEXT
WRAPPED_TEXT_line2"^

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    /*  -------------'_--------------- */
    /* '`w^'                           */



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

`'WRAPPED_TEXT
WRAPPED_TEXT_line2'^

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    /*  -------------(_--------------- */
    /* (`w^)                           */



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

`(WRAPPED_TEXT
WRAPPED_TEXT_line2)^

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------<_--------------- */
    /* <`w^>                           */



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2> b

`<WRAPPED_TEXT
WRAPPED_TEXT_line2>^

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    /*  -------------[_--------------- */
    /* [`w^]                           */



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

`[WRAPPED_TEXT
WRAPPED_TEXT_line2]^

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    /*  -------------`_--------------- */
    /* \``w^\`                         */



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

``WRAPPED_TEXT
WRAPPED_TEXT_line2`^

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    /*  -------------Author--------------- */
    /* `$author^                           */



    drdr.xp

    drdr.xp b

    `drdr.xp^

    a drdr.xp


    /*  -------------begin--------------- */
    /* (begin                             */
    /*    (`todo0^)` `...^                */
    /*    (`todon^)` `...^)               */



    (begin
       (todo0)
       (todon)
       (todon)
       (todon))

    (begin
       (todo0_TYPED) _TYPED) b

    `(begin
       (todo0)
       (todon)
       (todon)
       (todon))^

    a (begin
       (todo0)
       (todon)
       (todon)
       (todon))


    /*  -------------case---------------         */
    /* (case (`of^)                              */
    /*           ({`match^} `expr1^)` `...^      */
    /*           ({`matchn^} `exprn^)` `...^     */
    /*           `else...^\(else \`cursor\^\)^^) */



    (case (of)
	      ({match} expr1)
	      ({matchn} exprn)
	      ({matchn} exprn)
	      ({matchn} exprn)
	      (else \))

	      (case (of_TYPED)
			({match_TYPED} expr1_TYPED) _TYPED
			(else \)) b

			`(case (of)
				  ({match} expr1)
				  ({matchn} exprn)
				  ({matchn} exprn)
				  ({matchn} exprn)
				  (else \))^

				  a (case (of)
					    ({match} expr1)
					    ({matchn} exprn)
					    ({matchn} exprn)
					    ({matchn} exprn)
					    (else \))


    /*  -------------cond---------------         */
    /* (cond ([`condition^] `expr1^)` `...^      */
    /* `      ([`condition^] `exprn^)` `...^     */
    /*           `else...^\(else \`cursor\^\)^^) */



    (cond ([condition] expr1)
          ([condition] exprn)
          ([condition] exprn)
          ([condition] exprn)
	      (else \))

	      (cond ([condition_TYPED] expr1_TYPED) _TYPED
			(else \)) b

			`(cond ([condition] expr1)
			      ([condition] exprn)
			      ([condition] exprn)
			      ([condition] exprn)
				  (else \))^

				  a (cond ([condition] expr1)
				        ([condition] exprn)
				        ([condition] exprn)
				        ([condition] exprn)
					    (else \))


    /*  -------------def--------------- */
    /* (define `varName^ `cursor^)      */



    (define varName )

    (define varName_TYPED ) b

    `(define varName )^

    a (define varName )


    /*  -------------defun--------------- */
    /* (define `funName^                  */
    /*         (lambda [`params^]         */
    /*                 (`cursor^))        */
    /*  )                                 */



    (define funName
	    (lambda [params]
		    ())
     )

    (define funName_TYPED
	    (lambda [params_TYPED]
		    ())
     ) b

    `(define funName
	    (lambda [params]
		    ())
     )^

    a (define funName
	    (lambda [params]
		    ())
     )


    /*  -------------do---------------      */
    /* (do {(`var^ `init^ `step^)` `...0^   */
    /* `     (`var^ `init^ `step^)` `...0^} */
    /*    ([`test^] `exprs^)                */
    /*    (`command^)` `...2^               */
    /*    (`command^)` `...2^)              */



    (do {(var init step)
         (var init step)
         (var init step)
         (var init step)}
       ([test] exprs)
       (command)
       (command)
       (command))

    (do {(var_TYPED init_TYPED step_TYPED) 0_TYPED}
       ([test_TYPED] exprs_TYPED)
       (command_TYPED) 2_TYPED) b

    `(do {(var init step)
         (var init step)
         (var init step)
         (var init step)}
       ([test] exprs)
       (command)
       (command)
       (command))^

    a (do {(var init step)
         (var init step)
         (var init step)
         (var init step)}
       ([test] exprs)
       (command)
       (command)
       (command))


    /*  -------------Email--------------- */
    /* `$email^                           */



    drdr.xp@gmail.com

    drdr.xp@gmail.com b

    `drdr.xp@gmail.com^

    a drdr.xp@gmail.com


    /*  -------------File--------------- */
    /* `file()^                          */



    test.page.windef

    test.page.windef b

    `test.page.windef^

    a test.page.windef


    /*  -------------if---------------    */
    /* (if [`condition^]                  */
    /*         (`then^)                   */
    /*         `else...{{^(`cursor^)`}}^) */



    (if [condition]
	    (then)
	    ())

    (if [condition_TYPED]
	    (then_TYPED)
	    else_TYPED) b

    `(if [condition]
	    (then)
	    ())^

    a (if [condition]
	    (then)
	    ())


    /*  -------------lambda--------------- */
    /* (lambda [`params^]                  */
    /*                 (`cursor^))         */



    (lambda [params]
		    ())

    (lambda [params_TYPED]
		    ()) b

    `(lambda [params]
		    ())^

    a (lambda [params]
		    ())


    /*  -------------let---------------    */
    /* (let [(`newVar^ `value^` `...^)     */
    /* `      (`newVarn^ `valuen^` `...^)] */
    /*          (`cursor^))                */



    (let [(newVar value)
          (newVarn valuen)
          (newVarn valuen)
          (newVarn valuen)]
	     ())

    (let [(newVar_TYPED value_TYPED _TYPED)]
	     ()) b

    `(let [(newVar value)
          (newVarn valuen)
          (newVarn valuen)
          (newVarn valuen)]
	     ())^

    a (let [(newVar value)
          (newVarn valuen)
          (newVarn valuen)
          (newVarn valuen)]
	     ())


    /*  -------------letrec---------------    */
    /* (letrec [(`newVar^ `value^` `...^)     */
    /* `         (`newVarn^ `valuen^` `...^)] */
    /*          (`cursor^))                   */



    (letrec [(newVar value)
    	 (newVarn `valuen^)
    	 (newVarn `valuen^)
    	 (newVarn `valuen^)]
	     ())

    (letrec [(newVar_TYPED value_TYPED _TYPED)]
	     ()) b

    `(letrec [(newVar value)
    	 (newVarn `valuen^)
    	 (newVarn `valuen^)
    	 (newVarn `valuen^)]
	     ())^

    a (letrec [(newVar value)
    	 (newVarn `valuen^)
    	 (newVarn `valuen^)
    	 (newVarn `valuen^)]
	     ())


    /*  -------------unless--------------- */
    /* (unless (`cond^)                    */
    /*    (`todo0^)` `...^                 */
    /*    (`todon^)` `...^)                */



    (unless (cond)
       (todo0)
       (todon)
       (todon)
       (todon))

    (unless (cond_TYPED)
       (todo0_TYPED) _TYPED) b

    `(unless (cond)
       (todo0)
       (todon)
       (todon)
       (todon))^

    a (unless (cond)
       (todo0)
       (todon)
       (todon)
       (todon))


    /*  -------------when--------------- */
    /* (when (`cond^)                    */
    /*    (`todo0^)` `...^               */
    /*    (`todon^)` `...^)              */



    (when (cond)
       (todo0)
       (todon)
       (todon)
       (todon))

    (when (cond_TYPED)
       (todo0_TYPED) _TYPED) b

    `(when (cond)
       (todo0)
       (todon)
       (todon)
       (todon))^

    a (when (cond)
       (todo0)
       (todon)
       (todon)
       (todon))


    /*  -------------{_--------------- */
    /* {`w^}                           */



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2} b

`{WRAPPED_TEXT
WRAPPED_TEXT_line2}^

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}
